#!/bin/env python3
#

import os
import os.path
import threading
import itertools
import dataclasses as dc

# Unique inode identifiers
#

osid_head = itertools.count()
osid_lock = threading.Lock()

def next_osid ():
    with osid_lock:
        return next(osid_head)

# Structures: file and directory nodes
#

@dc.dataclass
class DNode:
    name_fold : str
    path_fold : str
    node_list : list = dc.field(default_factory = list)
    node_osid : int = dc.field(default_factory = next_osid)

@dc.dataclass
class FNode:
    name_fold : str
    path_fold : str
    path_real : str
    node_osid : int = dc.field(default_factory = next_osid)

# Case folding (lowercase)
#

def foldcase (what : str):
    return str(what).lower()

# Path renormalization (this is a mess)
#

def normpath (path : str):
  return os.path.normpath(os.path.join('/', path))

# Overlay layer processing
#
# (1) We case-fold and merge the directory tree (dtree). 
# (2) We case-fold files and place them into appropriate case-folded directories.
# (3) We care about the actual paths in the filesystem to the individual files.
#

def processlayer (lpath : str, dtree : dict[str, DNode], ftree : dict[str, FNode]):
    for (rpath, dlist, flist) in os.walk(lpath):
        rfold = normpath(foldcase(os.path.relpath(rpath, lpath)))
        if rfold in dtree:
            rnode = dtree.get(rfold)
        else:
            rname = os.path.basename(rfold)
            rnode = DNode(name_fold = rname, path_fold = rfold)
            dtree[rfold] = rnode

        # Process children directories
    
        for dname in dlist:
            dname = foldcase(dname)
            dfold = normpath(os.path.join(rfold, dname))
            if dfold not in dtree:
                dnode = DNode(name_fold = dname, path_fold = dfold)
                rnode.node_list.append(dnode)
                dtree[dfold] = dnode

        # Process children files

        for fname in flist:
            fpath = os.path.join(rpath, fname)
            fname = foldcase(fname)
            ffold = normpath(os.path.join(rfold, fname))

            if ffold not in ftree:
                fnode = FNode(name_fold = fname, path_fold = ffold, path_real = fpath)
                rnode.node_list.append(fnode)
                ftree[ffold] = fnode
            else:
                # Update the pre-existing file node with new path
                fnode = ftree.get(ffold)
                fnode.path_real = fpath

def populate_root (dtree : dict[str, DNode]):
    rfold = '/'
    rnode = DNode(name_fold = rfold, path_fold = rfold)
    dtree[rfold] = rnode

import fuse
import stat
import errno

fuse.fuse_python_api = (0, 2)

def getattr_dnode (node):
  info = fuse.Stat()
  info.st_mode = stat.S_IFDIR | 0o500
  info.st_ino = node.node_osid
  info.st_size = len(node.node_list)
  info.st_nlink = len(node.node_list)
  return info

def getattr_fnode (node):
  info = fuse.Stat()
  info.st_mode = stat.S_IFREG | 0o400
  info.st_ino = node.node_osid
  info.st_size = os.path.getsize(node.path_real)
  info.st_nlink = 1
  return info

class ROCFOMFS (fuse.Fuse):
    def getattr (self, path):
        path = foldcase(path)
        if (node := self._dtree.get(path)):
            return getattr_dnode(node)
        if (node := self._ftree.get(path)):
            return getattr_fnode(node)
        return - errno.ENOENT

    def access (self, path, mode):
        path = foldcase(path)
        if (path in self._dtree):
            return 0
        if (path in self._ftree):
            return 0
        return - errno.ENOENT

    def readdir (self, path, offset):
        path = foldcase(path)
        if not (node := self._dtree.get(path)):
            return - errno.ENOENT
        for each in node.node_list:
            yield fuse.Direntry(each.name_fold, ino = each.node_osid)
        yield from [ fuse.Direntry('.'), fuse.Direntry('..') ]

    def read (self, path, length, offset):
        path = foldcase(path)
        if not (node := self._ftree.get(path)):
            return - errno.ENOENT
        with open(node.path_real, 'rb') as file:
            file.seek(offset)
            return file.read(length)
      
    def __init__ (self):
        super().__init__()
        self._dtree : dict[str, DNode] = dict()
        self._ftree : dict[str, FNode] = dict()
        populate_root(self._dtree)

    def main (self):
        opts, args = self.cmdline
        if not (llist := opts.llist):
            llist = list()

        for lpath in llist:
            lpath = os.path.abspath(lpath)
            processlayer(lpath, self._dtree, self._ftree)

        super().main()

def program ():
    server = ROCFOMFS()
    server.parser.add_option(
        '--layer', '-l', 
        dest = 'llist', 
        action = 'append', 
        metavar = '@',
        help = 'add overlay layer at @'
    )
    server.parse()
    server.main()

if (__name__ == '__main__'):
    program()

